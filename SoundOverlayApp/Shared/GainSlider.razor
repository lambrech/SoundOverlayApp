@using KristofferStrube.Blazor.WebAudio
@* <MudSlider T="float" Value="this.Gain" ValueChanged="value => this.OnValueChangedAsync(value)" Variant="Variant.Filled">Volume</MudSlider> *@
@* <MudSlider T="float" ValueChanged="this.OnValueChangedAsync" Variant="Variant.Filled">Volume</MudSlider> *@
<MudSlider T="float" Value="this.Gain" ValueChanged="this.OnValueChangedAsync" Variant="Variant.Filled">Volume</MudSlider>
<span class="badge bg-primary">@this.Gain%</span>

@code {

    private readonly string inputId = $"gain_{Guid.NewGuid()}"[..9];

    [Parameter]
    [EditorRequired]
    public GainNode? GainNode { get; set; }

    public float Gain { get; set; } = 10;

    protected override async Task OnParametersSetAsync()
    {
        if (this.GainNode is null) return;
        await using var audioParam = await this.GainNode.GetGainAsync();
        this.Gain = await audioParam.GetValueAsync() * 100;
        this.StateHasChanged();
    }

    public async Task GainUpdatedAsync()
    {
        if (this.GainNode is null) return;
        await using var audioParam = await this.GainNode.GetGainAsync();
        await audioParam.SetValueAsync(this.Gain / 100);
    }

    private async Task OnValueChangedAsync(float value)
    {
        this.Gain = value;
        await this.GainUpdatedAsync();
    }

}