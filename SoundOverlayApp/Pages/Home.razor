@page "/"

@using KristofferStrube.Blazor.WebAudio
@using System.Globalization
@using KristofferStrube.Blazor.WebIDL
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient

<div class="mx-4">
<GainSlider GainNode="this.gainNode" />
<br />
<br />

<div style="display: flex; flex-direction: row; user-select: none;" aria-label="Player controls">
    <MudButton Variant="Variant.Outlined" Size="Size.Small" Class="mx-4 media-control" aria-label="Previous track" @onclick="this.PreviousTrack">⏮</MudButton>
    @if (this.playing)
    {
            <MudButton Variant="Variant.Outlined" Size="Size.Small" Class="mx-4 media-control" aria-label="Pause" @onclick=this.Pause>⏸</MudButton>
    }
    else
    {
            <MudButton Variant="Variant.Outlined" Size="Size.Small" Class="mx-4 media-control" aria-label="Play" @onclick=this.Play>⏯</MudButton>
    }
        <MudButton Variant="Variant.Outlined" Size="Size.Small" Class="mx-4 media-control" aria-label="Next track" @onclick="this.NextTrack">⏭</MudButton>
</div>
<br/>
<span style="display: inline-block; text-align: right; width: 5%;">
    @Math.Round(this.playTime, 0)
</span>
<svg width="60%" viewBox="0 0 1 0.05" style="margin-left: 5px; margin-right: 5px;">
    <rect fill="#bbb" x="0" y="0" width="1" height="0.05"></rect>
    @if (this.trackDuration is not 0)
    {
        <rect fill="#555" x="0" y="0" width="@((this.playTime / this.trackDuration).ToString(CultureInfo.InvariantCulture))" height="0.05"></rect>
    }
</svg>
<span style="display: inline-block; width: 5%;">
    @(this.trackDuration > 0 ? Math.Round(this.trackDuration, 0) : "")
</span>

<br />
<br />
<br />

<MudButton Variant="Variant.Outlined" @onclick="this.AddStartTrack">Add Start</MudButton>
<br />
<br />
<MudButton Variant="Variant.Outlined" @onclick="this.AddStopTrack">Add Stop</MudButton>
<br />
<br />
<MudButton Variant="Variant.Outlined" @onclick="this.AddSilenceTrack">Add silence</MudButton>
<MudText>silence time in seconds:</MudText>
<MudInputString Variant="Variant.Outlined" Immediate="true" Margin="Margin.Dense" @bind-Value="this.SilenceInSeconds"></MudInputString>
<MudCheckBox @bind-Value="this.WithBeep">Halbzeit Beep hinzufügen</MudCheckBox>
@* <label>
    silence time in seconds:
    <input @bind="this.SilenceInSeconds" />
    Halbzeit Beep hinzufügen
    <input type="checkbox" @bind="this.WithBeep" />
    - first beep generation takes a few seconds
</label> *@
<br />

<MudList T="string">
    @for (var i = 0; i < this.tracks.Count; i++)
    {
            var tmp = i;
            <MudListItem>
                @if (tmp == this.currentTrack)
                {
                    <u>@(this.tracks[tmp])</u>
                }
                else
                {
                    @(this.tracks[tmp])
                }

                <MudIconButton Style="margin-left: 12px; margin-bottom: 4px;" Size="Size.Small" Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Delete" aria-label="delete" @onclick="() => this.tracks.RemoveAt(tmp)" />
            </MudListItem>
    }
    </MudList>
</div>

@code {

    GainNode gainNode = default!;

    private bool playing;

    private bool currentTrackLoaded;

    private int currentTrack;

    private double playTime;

    private double startTime;

    private double? pauseTime;

    private double offset;

    private double trackDuration;

    private int interactions;

    private List<string> tracks = new();

    private Dictionary<string, AudioBuffer> loadedBuffers = new Dictionary<string, AudioBuffer>();

    private AudioContext context = default!;

    private AudioDestinationNode destination = default!;

    private AudioBufferSourceNode currentAudioBufferNode = default!;

    private AudioBuffer currentAudioBuffer = default!;

    private string SilenceInSeconds = "10";

    public bool WithBeep { get; set; }

    private const string trackStart = "media/3-2-1-go.mp3";
    private const string trackStartName = "3-2-1-go.mp3";

    private const string trackStop = "media/3-2-1-stop.mp3";
    private const string trackStopName = "3-2-1-stop.mp3";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await this.EnsureInitialized();
            // await this.EnsureCurrentTrackLoaded();

            var start = await this.HttpClient.GetByteArrayAsync(trackStart);
            this.loadedBuffers[trackStartName] = await this.context.DecodeAudioDataAsync(start);

            var stop = await this.HttpClient.GetByteArrayAsync(trackStop);
            this.loadedBuffers[trackStopName] = await this.context.DecodeAudioDataAsync(stop);
        }
        catch
        {
            Console.WriteLine("Couldn't initialize yet.");
        }
    }

    Float32Array? beepArray;

    public async Task EnsureInitialized()
    {
        if (this.context is { }) return;

        this.context = await AudioContext.CreateAsync(this.JSRuntime);
        this.destination = await this.context.GetDestinationAsync();

        this.gainNode = await GainNode.CreateAsync(this.JSRuntime, this.context, new() { Gain = 0.5f });
        await this.gainNode.ConnectAsync(this.destination);
    }

    public async Task<AudioBuffer> GenerateSilenceBuffer(int seconds, bool halfTimeBeep = false)
    {
        var sampleRate = await this.context.GetSampleRateAsync();
        var buf = await AudioBuffer.CreateAsync(this.JSRuntime, new AudioBufferOptions() { Length = (ulong)(sampleRate * seconds), SampleRate = sampleRate });
        var lengthAsync = await buf.GetLengthAsync();

        if (halfTimeBeep)
        {
            if (this.beepArray == null)
            {
                var beepBuf = await AudioBuffer.CreateAsync(this.JSRuntime, new AudioBufferOptions() { Length = (ulong)(sampleRate * 0.4), SampleRate = sampleRate });
                var beepLength = await beepBuf.GetLengthAsync();
                var beepCh = await beepBuf.GetChannelDataAsync(0);
                for (ulong i = 0; i < beepLength; i++)
                {
                    var val = (float)Math.Sin(2 * Math.PI * 1250 * (i / sampleRate));
                    await beepCh.FillAsync(val, (long)i);
                }

                this.beepArray = beepCh;
            }

            // var ch = await buf.GetChannelDataAsync(0);
            var beepStart = lengthAsync / 2;
            // var beepEnd = beepStart + (sampleRate / 2);
            await buf.CopyToChannelAsync(this.beepArray, 0, beepStart);

            // for (ulong i = beepStart; i < beepEnd; i++)
            // {
            //     var val = (float)Math.Sin(2 * Math.PI * 1250 * (i / sampleRate));
            //     await ch.FillAsync(val, (long)i);
            // }

        }

        return buf;
    }

    public async Task Play()
    {
        await this.EnsureInitialized();
        if (this.playing) return;
        this.interactions++;
        // await this.EnsureCurrentTrackLoaded();

        this.currentAudioBufferNode = await this.context.CreateBufferSourceAsync();
        var loadedBuffer = this.loadedBuffers[this.tracks[this.currentTrack]];
        this.trackDuration = await loadedBuffer.GetDurationAsync();
        this.trackDuration = await loadedBuffer.GetDurationAsync();
        await this.currentAudioBufferNode.SetBufferAsync(loadedBuffer);
        await this.currentAudioBufferNode.ConnectAsync(this.gainNode);
        if (this.pauseTime is null)
        {
            await this.currentAudioBufferNode.StartAsync();
        }
        else
        {
            await this.currentAudioBufferNode.StartAsync(0, this.offset);
        }
        this.startTime = await this.context.GetCurrentTimeAsync();

        this.playing = true;
        var currentInteractions = this.interactions;
        while (currentInteractions == this.interactions)
        {
            this.playTime = await this.context.GetCurrentTimeAsync() - this.startTime + this.offset;
            this.StateHasChanged();
            if (this.playTime >= this.trackDuration)
            {
                await this.NextTrack();
            }
            await Task.Delay(100);
        }
    }

    public async Task Pause()
    {
        if (!this.playing) return;
        this.interactions++;

        await this.currentAudioBufferNode.DisconnectAsync();
        await this.currentAudioBufferNode.StopAsync();
        await this.currentAudioBufferNode.DisposeAsync();

        var currentTime = await this.context.GetCurrentTimeAsync();
        this.pauseTime = await this.context.GetCurrentTimeAsync();
        if (this.offset + currentTime - this.startTime > this.trackDuration)
        {
            this.offset = 0;
        }
        else
        {
            this.offset += currentTime - this.startTime;
        }

        this.playing = false;
    }

    public Task PreviousTrack()
    {
        if (this.tracks.Count == 0)
        {
            return Task.CompletedTask;
        }

        return this.SwitchTrack(() => this.currentTrack = (this.currentTrack - 1 + this.tracks.Count) % this.tracks.Count);
    }

    public Task NextTrack()
    {
        if (this.tracks.Count == 0)
        {
            return Task.CompletedTask;
        }

        return this.SwitchTrack(() => this.currentTrack = (this.currentTrack + 1) % this.tracks.Count);
    }

    private async Task SwitchTrack(Action changeTrack)
    {
        await this.EnsureInitialized();

        var wasPlaying = this.playing;
        if (wasPlaying)
        {
            await this.Pause();
        }
        changeTrack();
        // this.currentTrackLoaded = false;
        // await this.EnsureCurrentTrackLoaded();
        this.offset = 0;
        this.playTime = 0;
        if (wasPlaying)
        {
            await this.Play();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await this.Pause();
    }

    private void AddStartTrack()
    {
        this.tracks.Add(trackStartName);
    }

    private void AddStopTrack()
    {
        this.tracks.Add(trackStopName);
    }

    private async Task AddSilenceTrack()
    {
        if (int.TryParse(this.SilenceInSeconds, out var seconds))
        {
            var buf = await this.GenerateSilenceBuffer(seconds, this.WithBeep);
            var trackName = $"Silence - {seconds} Sekunden{(this.WithBeep ? $" - mit Halbzeit Beep" : "")}";
            this.tracks.Add(trackName);
            this.loadedBuffers[trackName] = buf;
        }
    }

}